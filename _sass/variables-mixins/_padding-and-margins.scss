/* ----------------------------------------------------------------------------------
			PADDING AND MARGIN MIXINS
---------------------------------------------------------------------------------- */

/* +============================+
		A. INTRODUCTION/NOTES:
+=============================+ */

/*

Always default to using these mixins to set padding and margins. This will keep everything using our set standards for padding and margin sizes.

*/


/* +=============================+
		B. TABLE OF CONTENTS:
+=============================+ */

/*
    A. Notes
    B. Table of Contents

	1. Funcitons
    1.1 Set Size Variables
    1.2 Set Average
    1.3 Set Responsive Minimum
    1.4 Responsive Calc
  2. Padding Mixin

*/


/* +=============================+
		1. Functions
+=============================+ */


/* =-----------------------------=
		1.1 Set Size Variables
 */


 //Turns plaintext input in the mixin into its variable value.

/*=----------| Max |----------=*/
 @function max($max) {
   @if $max == 'xs'{ @return $xs;}
   @else if $max == 'sm'{ @return $sm;}
   @else if $max == 'md'{ @return $md;}
   @else if $max == 'lg'{ @return $lg;}
   @else if $max == 'xl'{ @return $xl;}
   @else if $max == 'xxl'{ @return $xxl;}
   @else if $max == 'xxxl'{ @return $xxxl;}
   @else if $max == 'xxxxl'{ @return $xxxxl;}
   @else if $max == 'xxxxxl'{ @return $xxxxxl;}
   @else if $max == 'xs--negative'{ $negative: $xs * -1; @return $negative;}
   @else if $max == 'sm--negative'{ $negative: $sm * -1; @return $negative;}
   @else if $max == 'md--negative'{ $negative: $md * -1; @return $negative;}
   @else if $max == 'lg--negative'{ $negative: $lg * -1; @return $negative;}
   @else if $max == 'xl--negative'{ $negative: $xl * -1; @return $negative;}
   @else if $max == 'xxl--negative'{ $negative: $xxl * -1; @return $negative;}
   @else if $max == 'xxxl--negative'{ $negative: $xxxl * -1; @return $negative;}
   @else if $max == 'xxxxl--negative'{ $negative: $xxxxl * -1; @return $negative;}
   @else if $max == 'xxxxxl--negative'{ $negative: $xxxxxl * -1; @return $negative;}
   @else{ @return $max * 1;}
 }


 /*=----------| Min |----------=*/
 @function min($min) {
   @if $min == 'xs'{ @return $xs--m;}
   @if $min == 'sm'{ @return $sm--m;}
   @if $min == 'md'{ @return $md--m;}
   @if $min == 'lg'{ @return $lg--m;}
   @if $min == 'xl'{ @return $xl--m;}
   @if $min == 'xxl'{ @return $xxl--m;}
   @if $min == 'xxxl'{ @return $xxxl--m;}
   @if $min == 'xxxxl'{ @return $xxxxl--m;}
   @if $min == 'xxxxxl'{ @return $xxxxxl--m;}
   @else if $min == 'xs--negative'{ $negative: $xs--m * -1; @return $negative;}
   @else if $min == 'sm--negative'{ $negative: $sm--m * -1; @return $negative;}
   @else if $min == 'md--negative'{ $negative: $md--m * -1; @return $negative;}
   @else if $min == 'lg--negative'{ $negative: $lg--m * -1; @return $negative;}
   @else if $min == 'xl--negative'{ $negative: $xl--m * -1; @return $negative;}
   @else if $min == 'xxl--negative'{ $negative: $xxl--m * -1; @return $negative;}
   @else if $min == 'xxxl--negative'{ $negative: $xxxl--m * -1; @return $negative;}
   @else if $min == 'xxxxl--negative'{ $negative: $xxxxl--m * -1; @return $negative;}
   @else if $min == 'xxxxxl--negative'{ $negative: $xxxxxl--m * -1; @return $negative;}
   @else{ @return $min * 1;}
 }


/* =-----------------------------=
		1.2 Set Average
*/

//Sets the average value between the min and max variables for the browser fallback.
@function avg($min, $max) {
  $avg: (min($min) + max($max)) / 2;
  @return #{$avg}px;
}


/* =-----------------------------=
		1.3 Set Responsive Minimum
*/

//Sets the min value that the responsive mixins can put on the sides. This makes sure that the responsive side padding or margins can't be below a certain value incase the scaling ratio is two high.

@function setResponsiveMin($scale-ratio, $min) {
  $scaled-min: min($min) * $scale-ratio;
 	@if $scaled-min < $responsive-min {
 		@return $responsive-min;
 	} @else {
 		@return $scaled-min;
 	}
}

/* =-----------------------------=
		1.4 Responsive Calc
*/

//Uses the fancy dancy formula to scale between the min and max value based on screen size.
@function responsiveCalc($min, $max) {
  $A: max($max) - min($min);
  $B: $responsive-screen-max - $responsive-screen-min;
  @return calc(#{min($min)}px + #{$A} * ((100vw - #{$responsive-screen-min}px) / #{$B} ));
}


/* +=============================+
		2. Padding Mixin
+=============================+ */

//Both of these padding mixins are responsive and will change their value based on the screen size but scaling also has the option to make the sides proportionally scale down more based on screen size to reduce screen waste due to over use of horizontal padding.

/* =-----------------------------=
		2.1 Scaling
*/

@mixin padding-scaling($max, $scale-ratio: 1, $min: $max) {
  //NOTE: When using the padding size variables in the mixin don't use '$' instead '$xl' would be entered as just 'xl'. By default if you enter in only a max value with one of the size varibles it will default the min value to the mobile size.

  //Makes sure the scale ratio wont make it too small
  $scaled: setResponsiveMin($scale-ratio, $min);

 padding: avg($min, $max);
 padding:
   //top + bottom
   responsiveCalc($min, $max)
   //sides
   responsiveCalc($scaled, $max);

 //Sets Media queries to set the min and max values
 @media (min-width: #{$responsive-screen-max}px) {
   padding: #{max($max)}px; }
 @media (max-width: #{$responsive-screen-min}px) {
   padding: #{min($min)}px #{$scaled}px; }
}


/* =-----------------------------=
		2.2 Responsive
*/


@mixin padding ($max, $direction: '', $min: $max) {

 //Sets padding on the sides
 @if $direction == 'x' {
   padding-left: avg($min, $max);
   padding-right: avg($min, $max);
   padding-left: responsiveCalc($min, $max);
   padding-right: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     padding-left: #{max($max)}px;
     padding-right: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     padding-left: #{min($min)}px;
     padding-right: #{min($min)}px;
   }

   //Sets Padding on the top and bottom
 } @else if $direction == 'y' {
   padding-top: avg($min, $max);
   padding-bottom: avg($min, $max);
   padding-top: responsiveCalc($min, $max);
   padding-bottom: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     padding-top: #{max($max)}px;
     padding-bottom: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     padding-top: #{min($min)}px;
     padding-bottom: #{min($min)}px;
   }

   //Allows mixin direction value to be blank and default to all sides.
 } @else if $direction == '' {
   $direction-prefixed: '';

   padding#{$direction-prefixed}: avg($min, $max);
   padding#{$direction-prefixed}: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     padding#{$direction-prefixed}: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     padding#{$direction-prefixed}: #{min($min)}px;
   }

   //Sets the padding direction
 } @else {
   @if $direction == 't'{
     $direction: 'top';
   }
   @if $direction == 'b'{
     $direction: 'bottom';
   }
   @if $direction == 'r'{
     $direction: 'right';
   }
   @if $direction == 'l'{
     $direction: 'left';
   }
   $direction-prefixed: '-#{$direction}';
   padding#{$direction-prefixed}: avg($min, $max);
   padding#{$direction-prefixed}: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     padding#{$direction-prefixed}: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     padding#{$direction-prefixed}: #{min($min)}px;
   }
 }
}



/* +=============================+
		3. Margin Mixin
+=============================+ */

//Both of these margin mixins are responsive and will change their value based on the screen size but scaling also has the option to make the sides proportionally scale down more based on screen size to reduce screen waste due to over use of horizontal margin.

/* =-----------------------------=
		3.1 Scaling
*/

@mixin margin-scaling($max, $scale-ratio: 1, $min: $max) {
  //NOTE: When using the margin size variables in the mixin don't use '$' instead '$xl' would be entered as just 'xl'. By default if you enter in only a max value with one of the size varibles it will default the min value to the mobile size.

  //Makes sure the scale ratio wont make it too small
  $scaled: setResponsiveMin($scale-ratio, $min);

  margin: avg($min, $max);
  margin:
    //top + bottom
    responsiveCalc($min, $max)
    //sides
    responsiveCalc($scaled, $max);

  //Sets Media queries to set the min and max values
  @media (min-width: #{$responsive-screen-max}px) {
    margin: #{max($max)}px; }
  @media (max-width: #{$responsive-screen-min}px) {
    margin: #{min($min)}px #{$scaled}px; }
}


/* =-----------------------------=
		3.2 Responsive
*/

@mixin margin ($max, $direction: '', $min: $max) {

 //Sets margin on the sides
 @if $direction == 'x' {
   margin-left: avg($min, $max);
   margin-right: avg($min, $max);
   margin-left: responsiveCalc($min, $max);
   margin-right: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     margin-left: #{max($max)}px;
     margin-right: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     margin-left: #{min($min)}px;
     margin-right: #{min($min)}px;
   }

   //Sets margin on the top and bottom
 } @else if $direction == 'y' {
   margin-top: avg($min, $max);
   margin-bottom: avg($min, $max);
   margin-top: responsiveCalc($min, $max);
   margin-bottom: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     margin-top: #{max($max)}px;
     margin-bottom: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     margin-top: #{min($min)}px;
     margin-bottom: #{min($min)}px;
   }

   //Allows mixin direction value to be blank and default to all sides.
 } @else if $direction == '' {
   $direction-prefixed: '';

   margin#{$direction-prefixed}: avg($min, $max);
   margin#{$direction-prefixed}: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     margin#{$direction-prefixed}: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     margin#{$direction-prefixed}: #{min($min)}px;
   }

   //Sets the margin direction
 } @else {
    @if $direction == 't'{
      $direction: 'top';
    }
    @if $direction == 'b'{
      $direction: 'bottom';
    }
    @if $direction == 'r'{
      $direction: 'right';
    }
    @if $direction == 'l'{
      $direction: 'left';
    }
   $direction-prefixed: '-#{$direction}';
   margin#{$direction-prefixed}: avg($min, $max);
   margin#{$direction-prefixed}: responsiveCalc($min, $max);

   //Sets Media queries to set the min and max values
   @media (min-width: #{$responsive-screen-max}px) {
     margin#{$direction-prefixed}: #{max($max)}px;
   }
   @media (max-width: #{$responsive-screen-min}px) {
     margin#{$direction-prefixed}: #{min($min)}px;
   }
 }
}
